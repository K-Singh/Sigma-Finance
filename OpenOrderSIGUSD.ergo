{
    // Open Order SIGUSD/tokens Contract
    // Borrowers send their collateralized ERG and/or tokens, along with setting the following registers
    // to specify details about the SigmaBond they wish to make
    // R4: Borrower's PK: SigmaProp
    // R5: Bond Principal (In number of raw / non-decimaled SIGUSD tokens): Long
    // R6: Total Repayment (In number of raw / non-decimaled SIGUSD tokens): Long
    // R7: Bond Maturity Height: Int

    // Principal represents the amount of SIGUSD the borrower gets immediately upon a Bond order being taken by a lender.
    // Total Repayment is the amount of SIGUSD the lender must receive before the maturity height, in order for
    // the borrower to not be liquidated
    // Bond Maturity Height is the height at which the borrower may be liquidated if the Bond has not been repaid yet.
    // The collateral for the Bond is the total contents of all assets + ERG within this box
    val borrowerPK      = SELF.R4[SigmaProp].get
    val principal       = SELF.R5[Long].get
    val repayment       = SELF.R6[Long].get
    val maturityHeight  = SELF.R7[Int].get
    val totalAssets     = SELF.tokens
    val totalERG        = SELF.value

    // Constants
    // _SIGUSD_Id: Token id of SIGUSD
    // _bondContractHash: Hash of bond contract


    // Output box if open order is closed.
    val bondBox         = OUTPUTS(0)
    val orderIsClosed   = _bondContractHash == blake2b256( bondBox.propositionBytes )

    if(orderIsClosed){
        // Order Matched / Closed path
        val loanBox     = OUTPUTS(1)
        val lenderPK    = bondBox.R8[SigmaProp].get
        val orderMade   = {
            allOf(
                Coll(
                    // Bond Box Conditions
                    bondBox.R4[Coll[Byte]].get == SELF.id,
                    bondBox.R5[SigmaProp].get  == borrowerPK,
                    bondBox.R6[Long].get       == repayment,
                    bondBox.R7[Int].get        == maturityHeight,
                    bondBox.R8[SigmaProp].isDefined,
                    bondBox.tokens             == totalAssets,
                    bondBox.value              == totalERG,

                    // Loan Conditions
                    loanBox.propositionBytes   == borrowerPK.propBytes,
                    loanBox.value              == (1000L * 1000L),
                    loanBox.tokens(0)._1       == _SIGUSD_Id,
                    loanBox.tokens(0)._2       == principal,
                    loanBox.tokens.size        == 1
                )
            )
        }

        sigmaProp(orderMade) && lenderPK
    }else{
        // Refund Path
        borrowerPK
    }

}