{
    // Open Order ERG Contract
    // Borrowers send their collateralized ERG and/or tokens, along with setting the following registers
    // to specify details about the SigmaBond they wish to make
    // R4: Borrower's PK: SigmaProp
    // R5: Bond Principal (In number of nanoERG): Long
    // R6: Total Repayment (In number of nanoERG): Long
    // R7: Bond Maturity Height: Int

    // Principal represents the amount of tokens the borrower gets immediately upon a Bond order being taken by a lender.
    // Total Repayment is the amount of tokens the lender must receive before the maturity height, in order for
    // the borrower to not be liquidated
    // Bond Maturity Length is duration of Bond, which is starting at open order closing.
    // If using length, value must be less than 30 (So 30 block length of bond).
    // The collateral for the Bond is the total contents of all assets + ERG within this box

    val borrowerPK      = SELF.R4[SigmaProp].get
    val principal       = SELF.R5[Long].get
    val repayment       = SELF.R6[Long].get
    val maturityLength  = SELF.R7[Int].get
    val totalAssets     = SELF.tokens
    val totalERG        = SELF.value

    // Constants
    // _bondContractHash: Hash of bond contract
    // _devPK: PK of dev :^)

    // Output box if open order is closed.
    val bondBox         = OUTPUTS(0)
    val orderIsClosed   = _bondContractHash == blake2b256( bondBox.propositionBytes )

    // Optional UI Fee Address, which may be inserted into context vars
    val optUIFee        = getVar[SigmaProp](0)

    // We use BigInts to prevent long overflow during multiplication of feeNumerator and principal value
    // This is only really necessary when dealing with large values
    val fees: Coll[(SigmaProp, BigInt)] = {

        val feeDenom = 100000L
        val devFee   = 500L         // 0.5%
        // If ui fee is defined, then we add an additional 0.4% fee
        if(optUIFee.isDefined){
            val uiFee = 400L        // 0.4%

            Coll(
                 (_devPK, (devFee.toBigInt * principal.toBigInt) / feeDenom.toBigInt),
                 (optUIFee.get, (uiFee.toBigInt * principal.toBigInt) / feeDenom.toBigInt)
            )
        }else{
            Coll( (_devPK, (devFee.toBigInt * principal.toBigInt) / feeDenom.toBigInt) )
        }
    }

    if(orderIsClosed){
        // Order Matched / Closed path
        val loanBox     = OUTPUTS(1)

        val orderMade   = {
            allOf(
                Coll(

                    // Bond Box Conditions
                    bondBox.R4[Coll[Byte]].get == SELF.id,
                    bondBox.R5[SigmaProp].get  == borrowerPK,
                    bondBox.R6[Long].get       == repayment,

                    bondBox.R8[SigmaProp].isDefined,
                    bondBox.tokens             == totalAssets,
                    bondBox.value              == totalERG,

                    // Maturity Conditions
                    maturityLength             >= 30, // All bond orders with duration must at least have duration of 30 blocks

                    (HEIGHT + maturityLength) - bondBox.R7[Int].get <= 8, // We allow 8 blocks for a tx spending this box
                    (HEIGHT + maturityLength) - bondBox.R7[Int].get >= 0, // to be confirmed, and assume maturity height
                                                                          // of bond box is HEIGHT + maturityLength
                                                                          // at time of transaction send.
                                                                          // Should prevent tx's disappearing from
                                                                          // mempool

                    // Loan Conditions
                    loanBox.propositionBytes   == borrowerPK.propBytes,
                    loanBox.value              == principal
                )
            )
        }


        // Ensure that correct fee output boxes exist
        val feesPaid = {

            val devFeesPaid = {
                if(fees(0)._2 > 0){ // Dev fee is greater than 0
                    val devOutput   = OUTPUTS(2)
                    allOf(
                        Coll(
                            devOutput.propositionBytes   == fees(0)._1.propBytes,
                            devOutput.value.toBigInt     == fees(0)._2
                        )
                    )
                }else{
                    true // do nothing if dev fee doesn't add up greater than 0, prevents errors on low value bonds
                }
            }

            val uiFeesPaid = {
                if(optUIFee.isDefined){
                    if(fees(1)._2 > 0){ // UI fee is greater than 0
                        val uiOutput    = OUTPUTS(3)
                        allOf(
                            Coll(
                                uiOutput.propositionBytes   == fees(1)._1.propBytes,
                                uiOutput.value.toBigInt     == fees(1)._2
                            )
                        )
                    }else{
                        true // do nothing if ui fee doesn't end up greater than 0, prevents errors on low value bonds
                    }
                }else{
                    true // if ui fee isn't defined, then default to true.
                }
            }
            devFeesPaid && uiFeesPaid
        }

        sigmaProp(orderMade && feesPaid)
    }else{
        // Refund Path
        borrowerPK
    }

}