{
    // Open Ex Order SIGUSD/tokens Contract
    // Sellers send the assets they wish to sell to a box under this contract
    // R4: Seller's PK: SigmaProp
    // R5: Sale Price (In nanoERG): Long

    // Sale Price is simply number of nanoERG to exchange for contents of the box

    val sellerPK        = SELF.R4[SigmaProp].get
    val salePrice       = SELF.R5[Long].get
    val totalAssets     = SELF.tokens
    val totalERG        = SELF.value

    // Constants
    // _devPK: PK of dev :^)

    // Output box if open order is closed.
    val exBox         = OUTPUTS(0)

    val orderIsClosed = exBox.propositionBytes != sellerPK.propBytes
    // Optional UI Fee Address, which may be inserted into context vars
    val optUIFee        = getVar[SigmaProp](0)

    // We use BigInts to help deal with long overflow on large value bonds
    val fees: Coll[(SigmaProp, BigInt)] = {

        val feeDenom = 100000L
        val devFee   = 500L
        // If ui fee is defined, then we add an additional 0.4% fee
        if(optUIFee.isDefined){
            val uiFee = 400L

            Coll(
                (_devPK, (devFee.toBigInt * principal.toBigInt) / feeDenom.toBigInt),
                (optUIFee.get, (uiFee.toBigInt * principal.toBigInt) / feeDenom.toBigInt)
            )
        }else{
            Coll( (_devPK, (devFee.toBigInt * principal.toBigInt) / feeDenom.toBigInt) )
        }
    }

    if(orderIsClosed){
        // Order Matched / Closed path
        val sellerBox     = OUTPUTS(1)

        val orderMade   = {
            allOf(
                Coll(
                    // Exchange Box Conditions
                    exBox.R4[Coll[Byte]].get   == SELF.id,
                    exBox.tokens               == totalAssets,
                    exBox.value                == totalERG,

                    // Loan Conditions
                    sellerBox.propositionBytes   == sellerPK.propBytes,
                    sellerBox.value              == salePrice
                )
            )
        }



        // Ensure that correct fee output boxes exist
        val feesPaid = {

            val devFeesPaid = {
                if(fees(0)._2 > 0){ // Dev fee is greater than 0
                    val devOutput   = OUTPUTS(2)
                    allOf(
                        Coll(
                            devOutput.propositionBytes      == fees(0)._1.propBytes,
                            devOutput.value                 == 1000000L,
                            devOutput.tokens(0)._1          == _tokenId,
                            devOutput.tokens(0)._2.toBigInt == fees(0)._2,
                            devOutput.tokens.size           == 1
                        )
                    )
                }else{
                    true // do nothing if dev fee doesn't add up greater than 0, prevents errors on low value bonds
                }
            }

            val uiFeesPaid = {
                if(optUIFee.isDefined){
                    if(fees(1)._2 > 0){ // UI fee is greater than 0
                        val uiOutput    = OUTPUTS(3)
                        allOf(
                            Coll(
                                uiOutput.propositionBytes       == fees(1)._1.propBytes,
                                uiOutput.value                  == 1000000L,
                                uiOutput.tokens(0)._1           == _tokenId,
                                uiOutput.tokens(0)._2.toBigInt  == fees(1)._2,
                                uiOutput.tokens.size            == 1
                            )
                        )
                    }else{
                        true // do nothing if ui fee doesn't end up greater than 0, prevents errors on low value bonds
                    }
                }else{
                    true // if ui fee isn't defined, then default to true.
                }
            }
            devFeesPaid && uiFeesPaid
        }

        sigmaProp(orderMade && feesPaid)
    }else{
        // Refund Path
        sellerPK
    }

}