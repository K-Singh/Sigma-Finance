{
    // Open Call Order Contract

    val sellerPK          = SELF.R4[SigmaProp].get
    val strikePrice       = SELF.R5[Long].get
    val credit            = SELF.R6[Long].get
    val expiryHeight      = SELF.R7[Int].get


    // Constants
    // _tokenId: Token id of payment currency
    // _optContractHash: Hash of bond contract
    // _devPK: PK of dev :^)

    // Output box if open order is closed.
    val optBox          = OUTPUTS(0)
    val orderIsClosed   = _optContractHash == blake2b256( optBox.propositionBytes )

    // Optional UI Fee Address, which may be inserted into context vars
    val optUIFee        = getVar[SigmaProp](0)

    // We use BigInts to help deal with long overflow on large value bonds
    val fees: Coll[(SigmaProp, BigInt)] = {

        val feeDenom = 100000L
        val devFee   = 450L
        // If ui fee is defined, then we add an additional 0.45% fee
        if(optUIFee.isDefined){
            val uiFee = 450L

            Coll(
                (_devPK, (devFee.toBigInt * principal.toBigInt) / feeDenom.toBigInt),
                (optUIFee.get, (uiFee.toBigInt * principal.toBigInt) / feeDenom.toBigInt)
            )
        }else{
            Coll( (_devPK, (devFee.toBigInt * principal.toBigInt) / feeDenom.toBigInt) )
        }
    }

    if(orderIsClosed){
        // Order Matched / Closed path
        val creditBox     = OUTPUTS(1)

        val orderMade   = {
            allOf(
                Coll(
                    // Opt Box Conditions
                    optBox.R4[Coll[Byte]].get == SELF.id,
                    optBox.R5[SigmaProp].get  == sellerPK,
                    optBox.R6[Long].get       == strikePrice,
                    optBox.R7[Int].get        == expiryHeight,
                    optBox.R8[SigmaProp].isDefined,
                    optBox.tokens.size        == 1, // We don't specify what token or amount of said token
                                                    // Allows flexibility for abnormal option contracts,
                                                    // along with options on NFTs
                    optBox.value               == 1000000L,


                    // Credit Conditions
                    creditBox.propositionBytes   == sellerPK.propBytes,
                    creditBox.value              == 1000000L,
                    creditBox.tokens(0)._1       == _tokenId,
                    creditBox.tokens(0)._2       == credit,
                    creditBox.tokens.size        == 1
                )
            )
        }



        // Ensure that correct fee output boxes exist
        val feesPaid = {

            val devFeesPaid = {
                if(fees(0)._2 > 0){ // Dev fee is greater than 0
                    val devOutput   = OUTPUTS(2)
                    allOf(
                        Coll(
                            devOutput.propositionBytes      == fees(0)._1.propBytes,
                            devOutput.value                 == 1000000L,
                            devOutput.tokens(0)._1          == _tokenId,
                            devOutput.tokens(0)._2.toBigInt == fees(0)._2,
                            devOutput.tokens.size           == 1
                        )
                    )
                }else{
                    true // do nothing if dev fee doesn't add up greater than 0, prevents errors on low value bonds
                }
            }

            val uiFeesPaid = {
                if(optUIFee.isDefined){
                    if(fees(1)._2 > 0){ // UI fee is greater than 0
                        val uiOutput    = OUTPUTS(3)
                        allOf(
                            Coll(
                                uiOutput.propositionBytes       == fees(1)._1.propBytes,
                                uiOutput.value                  == 1000000L,
                                uiOutput.tokens(0)._1           == _tokenId,
                                uiOutput.tokens(0)._2.toBigInt  == fees(1)._2,
                                uiOutput.tokens.size            == 1
                            )
                        )
                    }else{
                        true // do nothing if ui fee doesn't end up greater than 0, prevents errors on low value bonds
                    }
                }else{
                    true // if ui fee isn't defined, then default to true.
                }
            }
            devFeesPaid && uiFeesPaid
        }

        sigmaProp(orderMade && feesPaid)
    }else{
        // Refund Path
        sellerPK
    }

}